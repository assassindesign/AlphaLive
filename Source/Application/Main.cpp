/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

//  Created by Liam Meredith-Lacey on 14/09/2011.
//  Copyright 2011 nu desine.
//
//  This file is part of AlphaLive.
//
//  AlphaLive is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License, version 2, 
//  as published by the Free Software Foundation.
//  
//  AlphaLive is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#include "../../JuceLibraryCode/JuceHeader.h"
#include "Common.h"
#include "MainWindow.h"
#include "../Functionality Classes/AlphaLiveEngine.h"
#include "../File and Settings/AppSettings.h"
#include "../File and Settings/AppDocumentState.h"
#include "../GUI Classes/Initial Loading Window/LoadingWindow.h"
#include "../File and Settings/StoredSettings.h"
#include "MainMenuModel.h"

//==============================================================================
class AlphaSoftApplication  :   public JUCEApplication
{
public:
    //==============================================================================
    AlphaSoftApplication()
    {
    }

    ~AlphaSoftApplication()
    {
    }

    //==============================================================================
    void initialise (const String& commandLine)
    {
         #if JUCE_MAC || DOXYGEN
         std::cout << "Running on Mac..." << std::endl;
         #endif
         
         #if JUCE_WINDOWS || DOXYGEN
         std::cout << "Running on Windows..." <<std::endl;
         #endif
        
        #if JUCE_LINUX || DOXYGEN
        std::cout << "Running on Linux..." << std::endl;
        #endif
        
        commandManager = new ApplicationCommandManager();
        commandManager->registerAllCommandsForTarget (this);
         
        // Create temporary loading window. think about how to implement a realtime progress bar in here!
        loadingWindow = new LoadingWindow();
        
        //call this function incase it is the first time the app is run on a computer
        StoredSettings::getInstance()->setDefaultValues();
        
        //WOULD IT MAKE MORE SENSE TO DO THE BELOW STUFF IN THE CONSTRUCTOR OF APPDOCUMENTSTATE?
        //delete the current temp directory (incase of previous app crash that wouldn't have deleted the temp file)
        File::getSpecialLocation(File::tempDirectory).deleteRecursively();
        //create temp directory and set to be the current working directory. When a performance is saved,
        //the working directory is then set to the Audio Files folder created alongside the .alphalive file
        File::getSpecialLocation(File::tempDirectory).setAsCurrentWorkingDirectory();
   
        //create a single global instance of AppSettings
        p = AppSettings::Instance();
        
        //all functionality is done within this class!
        alphaLiveEngine = new AlphaLiveEngine();
        
        //would be nice if you could send the alphaLiveEngine reference (or pointer in this case)
        //as an init parameter above, but as the AppSettings::Instance is used in so many place
        //it became very messy and send the correct reference/pointer into every call
        AppSettings::Instance()->setAlphaLiveEngineRef(alphaLiveEngine);
        
        //should this be created here? If not, where?
        appDocumentState = new AppDocumentState();
        
        //set menu bar
        menuModel = new MainMenuModel(*appDocumentState);
        
        //pass in a reference to alphaLiveEngine so that the padLayout component object can be set as an observer to alphaLiveEngine
        //this ref will also be used so that the sequencerGrid object can be set as an observer to modeSequencer
        //this ref will also be used so that the presetComponent object can be set as an observer to modeController
        //pass in a ref to appDocumentState so that the Saving & Loading functions can be called by the GUI
        //this ref will also be used so that the mainComponent object can be set as an observer to appDocumentState so that the gui updates when something is loaded
        mainWindow = new MainAppWindow(*alphaLiveEngine, *appDocumentState, menuModel);
        
        //is this the best way of passing in this reference? could main be restructured so that mainWindow could be passed in when appDoumentState is initilised as a constructor argument?
        appDocumentState->setMainAppWindowRef (mainWindow);
        
        #if JUCE_MAC
        PopupMenu menu;
        menu.addCommandItem (commandManager, CommandIDs::About);
        menu.addSeparator();
        menu.addCommandItem (commandManager, CommandIDs::Preferences);
            
        MenuBarModel::setMacMainMenu (menuModel, &menu);
        #endif
        
        //delete loading window now as everything will be loaded at this point
        loadingWindow = 0;
        
        if (StoredSettings::getInstance()->launchTask == 2)
        {
            //Open the last project...
            if (StoredSettings::getInstance()->recentFiles.getFile(0) != File::nonexistent)
                appDocumentState->loadProject(false, StoredSettings::getInstance()->recentFiles.getFile(0));
        }
        
    
    }

    
    void shutdown()
    {
        // Do your application's shutdown code here..
        #if JUCE_MAC
        MenuBarModel::setMacMainMenu (nullptr);
        #endif
        menuModel = nullptr;
        delete menuModel;
        
        StoredSettings::deleteInstance();
        
        //delete temp file
        File::getSpecialLocation(File::tempDirectory).deleteRecursively();
        
        delete appDocumentState;
        //change the way the Singleton object gets destroyed?
        delete p;
    
        mainWindow = 0;
        
        delete alphaLiveEngine;
        
        commandManager = nullptr;
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        bool shouldQuit = AlertWindow::showOkCancelBox(AlertWindow::WarningIcon, "Quit", "Are you sure you want to quit?", "Yes", "No");
        
        if (shouldQuit == true)
        {
            /*
            bool shouldSave = AlertWindow::showOkCancelBox(AlertWindow::WarningIcon, "Save Project", "Would you like to save?", "Yes", "No");
            
            if (shouldSave == true)
            {
                //save
                appDocumentState->savePerformance(0);
            }
             */
            
            quit();
            
        }
        
    }

    //==============================================================================
    const String getApplicationName()
    {
        return "AlphaLive";
    }

    const String getApplicationVersion()
    {
        return ProjectInfo::versionString;
    }

    bool moreThanOneInstanceAllowed()
    {
        return false;
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        //This function gets called anytime the user tries to open a second instance of AlphaLive
        //or when a .alphalive file is opened. commandLine is the file path of the clicked file
        
        File selectedFile(commandLine.unquoted());
        
        //check to see if the clicked file is a .alphalive file
        if (selectedFile.getFileExtension() == ".alphalive")
        {
            //load selected file
            appDocumentState->loadProject(false, selectedFile);
            
        }
    }
    
    //==============================================================================
    //removed the nested MainMenuModel class and put it in a seperate file,
    //due to BAD_ACCESS when trying to call AppDocumentState::loadPerformance
    //from it
    //==============================================================================
    
    
    //==============================================================================
    void getAllCommands (Array <CommandID>& commands)
    {
        //JUCEApplication::getAllCommands (commands);
        
        const CommandID ids[] = 
        {	
            CommandIDs::New,
            CommandIDs::Open,
            CommandIDs::Save,
            CommandIDs::SaveAs,
            CommandIDs::CleanUpProject
        };
        
        commands.addArray (ids, numElementsInArray (ids));
    }
    
    void getCommandInfo (CommandID commandID, ApplicationCommandInfo& result)
    {
        const int cmd = ModifierKeys::commandModifier;
        const int shift = ModifierKeys::shiftModifier;
        //const int alt = ModifierKeys::altModifier;
        
        //within 'setInfo()' below, the name sets the String that appears in the Menu bar,
        //and the description sets what would appear in the tooltip if the command is set to a button
        //and the tooltip parameter is set to 'true'
        
        if(commandID == CommandIDs::New)
        {
            result.setInfo ("New...",
                            "Creates a new project.",
                            CommandCategories::FileCommands, 0);
            result.defaultKeypresses.add (KeyPress ('n', cmd, 0));
        }
        else if(commandID == CommandIDs::Open)
        {
            result.setInfo ("Open...",
                            "Opens an AlphaLive Project file (.alphalive).",
                            CommandCategories::FileCommands, 0);
            result.defaultKeypresses.add (KeyPress ('o', cmd, 0));
        }
        else if(commandID == CommandIDs::Save)
        {
            result.setInfo ("Save",
                            "Saves the current settings to an AlphaLive Project file (.alphalive).",
                            CommandCategories::FileCommands, 0);
            result.defaultKeypresses.add (KeyPress ('s', cmd, 0));
        }
        else if(commandID == CommandIDs::SaveAs)
        {
            result.setInfo ("Save As...",
                            "Saves the current settings to an AlphaLive Project file (.alphalive).",
                            CommandCategories::FileCommands, 0);
            result.defaultKeypresses.add (KeyPress ('s', cmd|shift, 0));
        }
        else if (commandID == CommandIDs::CleanUpProject)
        {
            result.setInfo ("Clean Up Project...",
                            "Removes any unused audio files from the projects 'Audio Files' directory.",
                            CommandCategories::FileCommands, 0);
        }
    }
    
    bool perform (const InvocationInfo& info)
    {
        if(info.commandID == CommandIDs::New)
        {
            appDocumentState->createNewProject();
        }
        else if(info.commandID == CommandIDs::Open)
        {
            appDocumentState->loadProject(true);
        }
        
        else if(info.commandID == CommandIDs::Save)
        {
            appDocumentState->saveProject();
        }
        
        else if(info.commandID == CommandIDs::SaveAs)
        {
            appDocumentState->saveProjectAs();
        }
        
        else if(info.commandID == CommandIDs::CleanUpProject)
        {
            appDocumentState->removeUneededAudioFiles();
        }
        
        return true;
    }
    
    
   
    //==============================================================================
private:
    ScopedPointer <MainAppWindow> mainWindow;
    ScopedPointer<LoadingWindow> loadingWindow;
    AlphaLiveEngine *alphaLiveEngine;
    AppSettings *p;
    AppDocumentState *appDocumentState;
    
    //ScopedPointer<MainMenuModel> menuModel;
    MainMenuModel *menuModel;
};

//==============================================================================
// This macro generates the main() routine that starts the app.
START_JUCE_APPLICATION(AlphaSoftApplication)
